#!/bin/bash


# variables for reuse
REQUIRED_DISTR="Ubuntu 16.04"
DISTR_CODENAME="xenial"
POLIS_VERSION=1.2.0
CRON_SENTINEL='* * * * * cd ~/sentinel && ./venv/bin/python bin/sentinel.py >/dev/null 2>&1'
TMP_DIR=/tmp

clear
echo "********************************************************************************************************"
echo "  This script will install and configure polis masternode, sentinel and monit monitoring"
echo
echo "  v$POLIS_VERSION"
echo "********************************************************************************************************"
echo
echo

lsb_release -sc | grep "$DISTR_CODENAME" &> /dev/null
if [[ $? -ne 0 ]]; then
    echo "$REQUIRED_DISTR is required. Are you using $REQUIRED_DISTR?"
    exit 1
fi

read -e -p "Enter Masternode Private Key (e.g. 31o6u1Ga4WxFog2b8QP9bQMrfbUtRj2tSk7sZVM9sryvQHamkyM) : " private_key
if [[ "$private_key" == "" ]]; then
    echo "WARNING: No private key entered, exiting!"
    exit 1
fi

read -e -p "Enter server IP address : " server_ip

echo
echo "Installing bitcoin PPA..."
echo

sudo apt-get -y update
# install ppa
sudo apt-get -y install software-properties-common
# Add Berkely PPA
sudo apt-add-repository -y ppa:bitcoin/bitcoin
# update repository to include Berkely
sudo apt-get -y update

# Install required packages
echo
echo "Installing base packages and dependencies..."
echo

sudo apt-get -y install \
    wget \
    git \
    zip \
    unzip \
    libevent-dev \
    libboost-dev \
    libboost-chrono-dev \
    libboost-filesystem-dev \
    libboost-program-options-dev \
    libboost-system-dev \
    libboost-test-dev \
    libboost-thread-dev \
    libdb4.8-dev \
    libdb4.8++-dev \
    libminiupnpc-dev \
    build-essential \
    libtool \
    autotools-dev \
    automake \
    pkg-config \
    libssl-dev \
    libevent-dev \
    bsdmainutils \
    libzmq3-dev \
    virtualenv \
    python-pip \


echo
echo "Downloading polis v${POLIS_VERSION}..."
echo

# Download polis to temp directory, show only progress of downloading
wget -q --show-progress https://github.com/polispay/polis/releases/download/v${POLIS_VERSION}/poliscore-${POLIS_VERSION}-linux.zip -O ${TMP_DIR}/poliscore-${POLIS_VERSION}-linux.zip

# Install polis
echo
echo "Installing poliscore-${POLIS_VERSION}..."
echo

cd ~
# overwrite files if exists 
unzip -o ${TMP_DIR}/poliscore-${POLIS_VERSION}-linux.zip
# copy binary 
sudo cp ~/poliscore-${POLIS_VERSION}-linux/usr/local/bin/polis{d,-cli} /usr/bin
# delete tmp file
rm -f ${TMP_DIR}/poliscore-${POLIS_VERSION}-linux.zip

echo
echo "Configuring poliscore-${POLIS_VERSION}..."
echo

# Create config for poliscore
mkdir -p "/home/${USER}/.poliscore"
rpcuser=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
rpcpassword=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)
cat << EOF > "/home/${USER}/.poliscore/polis.conf"
rpcuser=$rpcuser
rpcpassword=$rpcpassword
rpcallowip=127.0.0.1
listen=1
server=1
logtimestamps=1
maxconnections=256
externalip=$server_ip
masternodeprivkey=$private_key
masternode=1
addnode=174.138.60.69:24126
addnode=192.243.103.182:24126
addnode=185.153.231.146:24126
addnode=91.223.147.100
addnode=35.227.49.86:24126
addnode=91.223.147.100
addnode=35.227.49.86:24126
addnode=192.243.103.182:24126
addnode=185.153.231.146:24126
addnode=43.254.133.124
addnode=60.226.208.172
addnode=70.80.180.22
addnode=75.144.195.77
addnode=76.127.236.235
addnode=91.227.18.21
addnode=92.187.30.114
addnode=101.109.164.226
addnode=107.191.62.72
addnode=121.99.216.132
addnode=144.76.174.21
addnode=148.251.87.57
addnode=185.63.190.56
addnode=217.61.97.251
addnode=217.182.166.152
EOF

# create systemd service unit
echo "Create systemd service..."

cat << EOF | sudo tee "/etc/systemd/system/polisd@${USER}.service" > /dev/null
[Unit]
Description=Polis daemon

[Service]
User=%i
ExecStart=/usr/bin/polisd
PIDFile=/home/%i/.poliscore/polisd.pid

[Install]
WantedBy=multi-user.target
EOF

echo "Start polisd service..."
# apply new unit
sudo systemctl daemon-reload
# enable autostart for polisd
sudo systemctl enable "polisd@${USER}.service"
# start polisd
sudo systemctl start "polisd@${USER}.service"

echo
echo "Installing Sentinel..."
echo
# Download and install sentinel with requirements
# if directory exists - do pull
if ! test -d "/home/${USER}/sentinel"; then
    git clone https://github.com/polispay/sentinel "/home/${USER}/sentinel"
else
    cd "/home/${USER}/sentinel"
    git pull
fi

cd "/home/${USER}/sentinel"
virtualenv venv
source venv/bin/activate
pip install -r requirements.txt

echo
echo "Add cron job for sentinel..."
echo
# if we already have record in cron - do not add it again
crontab -l | grep "$CRON_SENTINEL" &> /dev/null
if [[ $? -ne 0 ]]; then
    (crontab -l 2>/dev/null && echo "$CRON_SENTINEL") | crontab -
fi
cd ~


echo
echo Install and configure monit...
echo

# install monit
sudo apt-get install -y monit

echo
echo Create monit configuration file...
cat << EOF | sudo tee /etc/monit/conf-available/polisd > /dev/null
# monitor polisd
check process polisd with pidfile /home/${USER}/.poliscore/polisd.pid
    start program = "/bin/systemctl start polisd@${USER}" with timeout 60 seconds
    stop program  = "/bin/systemctl stop polisd@${USER}"

# mail settings
set mail-format {
  from: monit@polis.com
  subject: monit alert --  $EVENT
  message: $EVENT Service $SERVICE
                Date:        $DATE
                Action:      $ACTION
                Host:        $HOST
                Description: $DESCRIPTION
}

set mailserver mail.nodegold.com port 587
  username postmaster@example.com password "password"
# using TLSV1 with timeout 30 seconds # uncomment if use TLS
set alert sysadmin@example.com # email address which will receive monit alerts
EOF

echo Enable monit configuraton...
# enable config if not enabled
if ! test -h /etc/monit/conf-enabled/polisd; then
    sudo ln -s /etc/monit/conf-available/polisd /etc/monit/conf-enabled/polisd
fi

echo Restart monit...
sudo systemctl restart monit

echo
echo Done.
echo
